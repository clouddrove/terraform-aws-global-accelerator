---
#
# This is the canonical configuration for the `README.md`
# Run `make readme` to rebuild the `README.md`
#

# Name of this project
name: Terraform AWS Global Accelerator

# License of this project
license: "APACHE"

# Canonical GitHub repo
github_repo: clouddrove/terraform-aws-global-accelerator

# Badges to display
badges:
  - name: "Latest Release"
    image: "https://img.shields.io/github/release/clouddrove/terraform-aws-global-accelerator.svg"
    url: "https://github.com/clouddrove/terraform-aws-global-accelerator/releases/latest"
  - name: "tfsec"
    image: "https://github.com/clouddrove/terraform-aws-global-accelerator/actions/workflows/tfsec.yml/badge.svg"
    url: "https://github.com/clouddrove/terraform-aws-global-accelerator/actions/workflows/tfsec.yml"
  - name: "Licence"
    image: "https://img.shields.io/badge/License-APACHE-blue.svg"
    url: "LICENSE.md"


#  description of this project
description: |-
  Terraform module to create Global Accelerator resource on AWS.

# extra content
include:
  - "terraform.md"

# How to use this project
# yamllint disable rule:line-length
usage: |-
  ### Simple Example
  Here is an example of how you can use this module in your inventory structure:
  ```hcl
    module "global_accelerator" {
      source  = "clouddrove/global-accelerator/aws"
      version = "1.0.0"

      name        = "example"
      environment = "test"
      label_order = ["name", "environment"]

      flow_logs_enabled   = true
      flow_logs_s3_bucket = module.s3_bucket.id
      flow_logs_s3_prefix = "example"

      listeners = {
        listener_1 = {
          client_affinity = "SOURCE_IP"

          endpoint_group = {
            endpoint_group_region          = "us-west-2"
            multiple_endpoint_group_region = "eu-west-1"
            health_check_port              = 80
            health_check_protocol          = "HTTP"
            health_check_path              = "/"
            health_check_interval_seconds  = 10
            health_check_timeout_seconds   = 5
            healthy_threshold_count        = 2
            unhealthy_threshold_count      = 2
            traffic_dial_percentage        = 100

            endpoint_configuration = [
              {
                client_ip_preservation_enabled = true
                endpoint_id                    = "arn:aws:elasticloadbalancing:us-west-2:924144197303:loadbalancer/app/alb-test/3ed98b63e2bb9c2a"
                weight                         = 50
              }
            ],
            multiple_endpoint_configuration = [
              {
                client_ip_preservation_enabled = true
                endpoint_id                    = "arn:aws:elasticloadbalancing:eu-west-1:924144197303:loadbalancer/app/alb-test/6b02ebcf5e0396d3"
                weight                         = 50
              }
            ]
          }

          port_ranges = [
            {
              from_port = 80
              to_port   = 80
            }
          ]
          protocol = "TCP"
        }
      }
    }
  ```
